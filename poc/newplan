# Process

- Use pypandoc to:
    - Install pandoc if missing
    - Read the target markdown
    - Return a json AST
- Use pandocfilters to:
    - Walk the AST tree
    - Return a custom tree
- Custom tree elements are native Mono elements

Example:

```python
[
    ChapterHeader(
        Text([
            Bold(Italic("Typography in ten minutes (A chapter)"))
        ])
    ),
    Paragraph(
        Text(
            [
                CrossRef("#line-spacing"),
                " is the vertical distance between lines",
                Note,
                ". It should be",
                Bold("120‚Äì145%"),
                " of the point",
                Note,
                " size."
            ],
            notes=["This is a note", "This is another note"]
        )
    ),
    Section(Text(...)),
    OrderedList([...])
]
```

- Before applying filter, walk once to find all references (for the names) (they are made by pandoc itself in header tags)
- Any element can have a `notes=` parameter

- After getting the tree, render all elements in granular blocks. Blocks denote where the pages can be broken
- Blocks all contain a main and side elements

```python
[
    Block(
        main=["Ready? Go."],
        side=["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
              "[1mThis is a[22m",
              "[1msub-chapter[22m",
              "",
              "[3mIt looks cool[23m"],
        side_offset=-1,
        block_offset=3
    ),
    Block(
        main=["‚ë†   The typographic quality of your document is determined largely by",
              "    how the   ô·¥è·¥Ö è  text looks. Why? Because there‚Äôs more body text",
              "    than anything else. So start every project by making the body",
              "    text look good. Then worry about the rest."]
    ),
    Block(
        main=["‚ë°   ·¥ò·¥è…™…¥·¥õ Íú±…™·¥¢·¥á is the how big the font is. In print, the most comfor-",
              "    table range for body text is [1m10‚Äì12 point[22m, or [1m15‚Äì25 pixels[22m¬≥."],
        side=["[2m¬≥: This is a foot-[22m",
              "[2mnote. Well, more[22m",
              "[2mlike a [3mside-note[23m[22m"],
        side_offset=0
    )
]
```

- Block offset determines where the whole block (including side) is rendered compared to the previous block. Default is 1, chapter headers are -3 (to show above the normal start of the text, see mockup), sub-chapter starts are 3 to leave enough space at the end of the previous sub-chapter.
- Side offset determines where the side of the block will be relatively to the main. For example, sub-chapter sides need to be rendered one line above the main part because of the line (see mockup)
- Sides are aligned right if left page, and inversely

For the second render pass, the renderer will render as many blocks as possible before page break.
While doing so, it will populate a fifo stack of sides to render, each side with their desired offset (counting from the first line and adding the side_offset, i.e. in the middle of a document, the desired offset can be 10 + -1 = 9 for a sub-chapter side). Then the renderer will empty the fifo stack. Each time a side is rendered, the offsets of all the lines that have been occupied are marked in a list. Here's the algorithm:

(O=desired offset, L=length in lines)

occupied: []

O | L
--+--
0 | 3
2 | 3
3 | 3
15| 3

We render the first side: it occupies offsets 0, 1, 2 and 3 (because of spacing):

occupied: [0, 1, 2, 3]

O | L
--+--
2 | 3
3 | 3
15| 3

Next, we want to insert (2, 3), but 2 is occupied, so we find the next index that is free, which is 4.
We then insert (2, 3) at 4, occupying 4, 5, 6 and 7

occupied: [0, 1, 2, 3, 4, 5, 6]  

O | L
--+--
3 | 3
15| 3

etc.

# Notes

Tables, figures, code blocks can have captions, rendered on the side

Custom filters:

- Smart em dash & smart quotes:
    - Can be done by converting from markdown to markdown-smart
- Smart fractions

Renderers:
- ANSI
- PostScript
    - Take inspiration from mockup.ps
    - Generate own font: use a complete font as fall back and overlay Iosevka on top

#¬†Later improvements

- block quotes are real quotes (format using the bold double quotes)
- for "note:" blocks, do a pandoc fenced div
- Syntax highlighting